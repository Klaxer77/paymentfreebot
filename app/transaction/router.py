from decimal import Decimal
from typing import Optional
from uuid import UUID
from aiogram.exceptions import TelegramBadRequest

from fastapi import APIRouter, Depends, Request, HTTPException, status

from app.bot import bot
from app.config import settings
from app.exceptions.base import TelegramError
from app.exceptions.schemas import SExceptionsINFO
from app.exceptions.transaction.exeptions import (
    TransactionCreated,
    TransactionErrorInitiator,
    TransactionErrorInitiatorOrUserFor,
    TransactionExceedsBalance,
    TransactionNotFound,
    TransactionNotTheInitiator,
    TransactionStatusActive,
    TransactionStatusActiveTrue,
    TransactionStatusCanceled,
    TransactionStatusCanceledTrue,
    TransactionStatusPending,
    TransactionStatus–°ompleted,
    TransactionUserError,
    Transaction–°onditionsAreMet,
)
from app.exceptions.users.exceptions import UserNotFound
from app.rating.dao import RatingDAO
from app.transaction.dao import TransactionDAO
from app.transaction.schemas import (
    STransaction,
    STransactionCreate,
    STransactionList,
)
from app.users.dao import UsersDAO
from app.users.depencies import get_current_user
from app.users.schemas import SUser
from app.logger import logger


router = APIRouter(prefix="/transaction", tags=["Transactions"])


@router.post("/create")
async def create(
    transaction: STransactionCreate,
    user: SUser = Depends(get_current_user),
) -> SExceptionsINFO:
    """
    **–°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É**

    **Headers**:

    Authorization: _access token_ *required

    **Args**:

    `user_for` - id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è , –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–¥–µ–ª–∫—É.

    `sum` - —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏ _min: 100_

    **Returns**:

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ.

    **Note**:

    –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —Å–¥–µ–ª–∫–∞ –ø–µ—Ä–µ–π–¥–µ—Ç –≤ —Å—Ç–∞—Ç—É—Å _'–≤ –æ–∂–∏–¥–∞–Ω–∏–∏'_

    """
    user_for = await UsersDAO.get_user(transaction.user_for)

    if transaction.user_for == user.id:
        raise TransactionUserError

    if user.balance < transaction.sum:
        raise TransactionExceedsBalance

    await TransactionDAO.create(
        initiator=user.id,
        user_for=transaction.user_for,
        sum=transaction.sum,
        status="–≤ –æ–∂–∏–¥–∞–Ω–∏–∏",
        creator=user.id,
    )

    send_user = user_for.chat_id
    if user_for.notification.create == True:
        try:
            await bot.send_message(
                send_user,
                text=f"‚è≥ –£ –≤–∞—Å –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É —Å {user.first_name} | @{user.username}\n–°—É–º–º–∞: {transaction.sum}",
            )
        except TelegramBadRequest as e:
            extra = {
                "user_for": transaction.user_for,
                "sum": transaction.sum,
                "send_user": send_user
            }
            logger.error(msg="TelegramBadRequest", extra=extra, exc_info=True)
            raise TelegramError(e.message)
    raise TransactionCreated


@router.post("/canceled")
async def canceled(
    transaction: STransaction,
    user: SUser = Depends(get_current_user),
) -> SExceptionsINFO:
    """
    **–û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É**

    **Headers**:

    Authorization: _access token_ *required

    **Args**:

    `transaction_id` - id –æ—Ç–º–µ–Ω—è–µ–º–æ–π —Å–¥–µ–ª–∫–∏.

    **Returns**:

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ.

    **Note**:

    –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —Å–¥–µ–ª–∫–∞ –ø–µ—Ä–µ–π–¥–µ—Ç –≤ —Å—Ç–∞—Ç—É—Å _'–æ—Ç–º–µ–Ω–µ–Ω–æ'_

    """
    current_transaction = await TransactionDAO.get_users(
        transaction_id=transaction.transaction_id
    )

    if not current_transaction:
        raise TransactionNotFound
    if user.id != current_transaction.initiator and user.id != current_transaction.user_for:
        raise TransactionErrorInitiatorOrUserFor
    if current_transaction.status == "–æ—Ç–º–µ–Ω–µ–Ω–æ":
        raise TransactionStatusCanceled
    if current_transaction.status == "–∑–∞–≤–µ—Ä—à–µ–Ω–æ":
        raise TransactionStatus–°ompleted
    if current_transaction.status == "–∞–∫—Ç–∏–≤–Ω–æ":
        await TransactionDAO.canceled(
            user_id=user.id,
            transaction_id=transaction.transaction_id,
            status="–æ—Ç–º–µ–Ω–µ–Ω–æ",
            chat_id_initiator=current_transaction.initiator_chat_id,
            chat_id_user_for=current_transaction.user_for_chat_id,
            balance=current_transaction.sum,
        )
        await TransactionDAO.update_rating(user_id=user.id)

        if str(user.id) == str(current_transaction.initiator) and current_transaction.notification_user_for_canceled == True:
            send_user = current_transaction.user_for_chat_id
            try:
                await bot.send_message(
                    send_user,
                    text=f"üö´ {user.first_name} | @{user.username} –æ—Ç–º–µ–Ω–∏–ª –∞–∫—Ç–∏–≤–Ω—É—é —Å–¥–µ–ª–∫—É\n"
                    f"–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏ —Å–æ—Å—Ç–∞–≤–ª—è–ª–∞: {current_transaction.sum}—Ä, —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –±–µ–∑ —É—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏"
                )
            except TelegramBadRequest as e:
                extra = {
                    "transaction_id": transaction.transaction_id
                }
                logger.error(msg="TelegramBadRequest", extra=extra, exc_info=True)
                raise TelegramError(e.message)
            raise TransactionStatusCanceledTrue
        
        if current_transaction.notification_initiator_canceled == True:
            send_user = current_transaction.initiator_chat_id
            try:
                await bot.send_message(
                    send_user,
                    text=f"üö´ {current_transaction.user_for_first_name} | @{current_transaction.user_for_username} –æ—Ç–º–µ–Ω–∏–ª –∞–∫—Ç–∏–≤–Ω—É—é —Å–¥–µ–ª–∫—É\n"
                    f"–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏ —Å–æ—Å—Ç–∞–≤–ª—è–ª–∞: {current_transaction.sum}—Ä, —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –±–µ–∑ —É—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏"
                )
            except TelegramBadRequest as e:
                extra = {
                    "transaction_id": transaction.transaction_id
                }
                logger.error(msg="TelegramBadRequest", extra=extra, exc_info=True)
                raise TelegramError(e.message)
            raise TransactionStatusCanceledTrue

    await TransactionDAO.update_status(
        transaction_id=transaction.transaction_id, status="–æ—Ç–º–µ–Ω–µ–Ω–æ"
    )
    raise TransactionStatusCanceledTrue


@router.post("/accept")
async def accept(
    transaction: STransaction,
    user: SUser = Depends(get_current_user),
) -> SExceptionsINFO:
    """
    **–ü—Ä–∏–Ω—è—Ç—å —Å–¥–µ–ª–∫—É**

    **Headers**:

    Authorization: _access token_ *required

    **Args**:

    `transaction_id` - id –ø—Ä–∏–Ω–∏–º–∞–µ–º–æ–π —Å–¥–µ–ª–∫–∏.

    **Returns**:

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ.

    **Note**:

    –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —Å–¥–µ–ª–∫–∞ –ø–µ—Ä–µ–π–¥–µ—Ç –≤ —Å—Ç–∞—Ç—É—Å _'–∞–∫—Ç–∏–≤–Ω–æ'_

    """
    current_transaction = await TransactionDAO.get_users(
        transaction_id=transaction.transaction_id
    )
    if not current_transaction:
        raise TransactionNotFound
    if user.id != current_transaction.initiator and user.id != current_transaction.user_for:
        raise TransactionErrorInitiatorOrUserFor
    if str(current_transaction.initiator) == str(user.id):
        raise TransactionErrorInitiator
    if current_transaction.status == "–∞–∫—Ç–∏–≤–Ω–æ":
        raise TransactionStatusActive
    if current_transaction.status == "–∑–∞–≤–µ—Ä—à–µ–Ω–æ":
        raise TransactionStatus–°ompleted
    if current_transaction.status == "–æ—Ç–º–µ–Ω–µ–Ω–æ":
        raise TransactionStatusCanceled

    await TransactionDAO.accept(
        transaction_id=transaction.transaction_id,
        status="–∞–∫—Ç–∏–≤–Ω–æ",
        chat_id_initiator=current_transaction.initiator_chat_id,
        chat_id_user_for=current_transaction.user_for_chat_id,
        balance=current_transaction.sum,
    )
    send_user = current_transaction.initiator_chat_id
    if current_transaction.notification_initiator_accept == True:
        try:
            await bot.send_message(
                send_user,
                text=f"‚úÖ {current_transaction.user_for_first_name} | @{current_transaction.user_for_username} –ø—Ä–∏–Ω—è–ª –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ —Å–¥–µ–ª–∫—É\n–°—É–º–º–∞: {current_transaction.sum}",
            )
        except TelegramBadRequest as e:
            extra = {
                "transaction_id": transaction.transaction_id
            }
            logger.error(msg="TelegramBadRequest", extra=extra, exc_info=True)
            raise TelegramError(e.message)
    raise TransactionStatusActiveTrue


@router.post("/conditions_are_met")
async def conditions_are_met(
    transaction: STransaction,
    user: SUser = Depends(get_current_user),
) -> SExceptionsINFO:
    """
    **–£—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã**

    **Headers**:

    Authorization: _access token_ *required

    **Args**:

    `transaction_id` - id –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º–æ–π —Å–¥–µ–ª–∫–∏.

    **Returns**:

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ.

    **Note**:

    –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —Å–¥–µ–ª–∫–∞ –ø–µ—Ä–µ–π–¥–µ—Ç –≤ —Å—Ç–∞—Ç—É—Å _'–∑–∞–≤–µ—Ä—à–µ–Ω–∞'_

    """
    current_transaction = await TransactionDAO.get_users(
        transaction_id=transaction.transaction_id
    )
    if not current_transaction:
        raise TransactionNotFound
    if user.id != current_transaction.initiator and user.id != current_transaction.user_for:
        raise TransactionErrorInitiatorOrUserFor
    if user.chat_id != current_transaction.initiator_chat_id:
        raise TransactionNotTheInitiator
    if current_transaction.status == "–≤ –æ–∂–∏–¥–∞–Ω–∏–∏":
        raise TransactionStatusPending
    if current_transaction.status == "–∑–∞–≤–µ—Ä—à–µ–Ω–æ":
        raise TransactionStatus–°ompleted
    if current_transaction.status == "–æ—Ç–º–µ–Ω–µ–Ω–æ":
        raise TransactionStatusCanceled
    update_transaction = await TransactionDAO.conditions_are_met(
        initiator=current_transaction.initiator,
        user_for=current_transaction.user_for,
        transaction_id=transaction.transaction_id,
        status="–∑–∞–≤–µ—Ä—à–µ–Ω–æ",
        chat_id_initiator=current_transaction.initiator_chat_id,
        chat_id_user_for=current_transaction.user_for_chat_id,
        balance=current_transaction.sum,
    )
    commission = current_transaction.sum * Decimal((settings.COMMISION_PERCENTAGE / 100))
    commision_result = current_transaction.sum - commission
    send_user = current_transaction.user_for_chat_id
    if current_transaction.notification_user_for_conditions_are_met == True:
        try:
            await bot.send_message(
                send_user,
                text=f"‚≠êÔ∏è –°–¥–µ–ª–∫–∞ —Å {user.first_name} | @{user.username} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
                f"–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {round(commision_result, 2)}—Ä —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ {settings.COMMISION_PERCENTAGE}%"
            )
        except TelegramBadRequest as e:
            extra = {
                "transaction_id": transaction.transaction_id
            }
            logger.error(msg="TelegramBadRequest", extra=extra, exc_info=True)
            raise TelegramError(e.message)
    await TransactionDAO.update_rating(user_id=user.id)
    raise Transaction–°onditionsAreMet


@router.get("/list_with_status")
async def list_with_status(
    user: SUser = Depends(get_current_user),
    statuses: Optional[str] = None,
) -> list[STransactionList] | SExceptionsINFO:
    """
    **–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–¥–µ–ª–æ–∫**

    **Headers**:

    Authorization: _access token_ *required

    **Args**:

    `statuses` - —Å—Ç–∞—Ç—É—Å —Ñ–∏–ª—å—Ç—Ä—ã, –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–≤ –æ–∂–∏–¥–∞–Ω–∏–∏,–∑–∞–≤–µ—Ä—à–µ–Ω–æ").
    - –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω —Å—Ç–∞—Ç—É—Å, —Ç–æ –≤–µ—Ä–Ω—É—Ç—Å—è –≤—Å–µ —Å–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞.

    **Returns**:

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å–¥–µ–ª–∫–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏–ª–∏ –±–µ–∑ –Ω–µ–≥–æ.

    **Note**:

    –í–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: _–≤ –æ–∂–∏–¥–∞–Ω–∏–∏_, _–∑–∞–≤–µ—Ä—à–µ–Ω–æ_, _–∞–∫—Ç–∏–≤–Ω–æ_, _–æ—Ç–º–µ–Ω–µ–Ω–æ_.
    """
    if statuses is None:
        statuses = "–≤ –æ–∂–∏–¥–∞–Ω–∏–∏,–æ—Ç–º–µ–Ω–µ–Ω–æ,–∞–∫—Ç–∏–≤–Ω–æ,–∑–∞–≤–µ—Ä—à–µ–Ω–æ"
    status_list = [status.strip() for status in statuses.split(",")]

    return await TransactionDAO.list_with_status(user_id=user.id, statuses=status_list)


# @router.get("/test/get_users/{transaction_id}")
# async def test_get_users(transaction_id: UUID):
#     return await TransactionDAO.get_users(transaction_id=transaction_id)
